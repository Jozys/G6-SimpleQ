openapi: 3.0.3
info:
  title: SimpleQ - API documentation
  version: 1.0.0
  description: The API specification for the SimpleQ project
servers:
  - url: https://simpleq.local
  - url: http://localhost:3000

components:
  schemas:
    Author: 
      type: object
      properties:
        id:   
          type: string
          description: the id of the author
        name: 
          type: string
        type: 
          type: string
          enum: ["guest", "user", "pro", "ai"]

    UserContent:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        likes:
          type: integer
        dislikes:
          type: integer
        created:
          type: string
          description: The date, the question was created
        opinion:
          type: string
          enum:
            - like
            - dislike
            - none
          
    Question:
      allOf:
        - $ref: '#/components/schemas/UserContent'
        - type: object
          properties:
            title:
              type: string
            tags: 
              type: array
              items:
                type: string
            numberOfAnswers:
              type: integer
            updated: 
              type: string
              description: The date, the question was last updated
            author: 
                $ref: '#/components/schemas/Author'

    Answer:
      allOf:
        - $ref: '#/components/schemas/UserContent'
        - type: object
          properties:
            author:
              $ref:  '#/components/schemas/Author'
    AItype:
      type: object
      properties:
        type:
          aiType: string
          enum:
            - WolframAlpha
            - GPT

    CreateQuestion:
      type: object
      properties:
        title:
          type: string
          nullable: false
        content: 
          type: string
          nullable: false
        genAI:
          type: boolean
          description: Will be validated in the backend for user permission
          default: false

    CreateAnswer:
      type: object
      properties:
        content:
          type: string
          nullable: false


    UpdateUser:
      type: object
      properties:
        newName:
          type: string
          description: 'New name for user'
          default: false
        # userStatus TODO
    
    Profile:
      allOf:
        - $ref: '#/components/schemas/ProfileShort'
      type: object
      properties:
        userStatistics:
          type: object
          description: 'statistics for user activity, can be used to create diagrams'
          properties:
            TODO:
              type: integer
              description: TODO
        activityPoints: 
          type: integer
        expertTopics:
          type: array
          items:
            type: object
            properties:
              tagName: 
                type: string
              points: 
                type: integer

    ProfileShort:
      type: object
      properties:
        name:
          type: string
          nullable: true
        profilePicture:
          type: string
          description: 'link to profile picture'
          nullable: true
        registrationDate:
          type: string
          description: 'date when user was registered'
          nullable: false
        accountState:
          type: string
          enum: ["registered", "pro"]
        expertTopics:
          type: array
          items:
            type: string
          description: 'list of topics, where the individual user is expert'
    Quest:
      type: object
      properties:
        title: 
          type: string
        description:
          type: string
        points:
          type: integer
        done:
          type: boolean
    LoginAttempt:
      type: object
      properties:
        date: 
          type: string
          description: The date of the login attempt
        successfully:
          type: boolean

        
tags:
  - name: questions
    description: All information in the questions
  - name: user
    description: All information related to users
  - name: tag
    description: All requests related to tags
  - name: favourites
    description: All requests related to favourites
  - name: quests
    description: All requests related to quests
  - name: login
    description: All login related requests not needed for ory
  - name: special
    description: A special requests for special requirements
    
 
paths:
  /question/trending:
    get: 
      tags :
        - questions
      summary: Get the most upvoted questions of the seven days
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '401':
          description: User is not logged in
  
  /question/search/:
    get:
      tags:
        - questions
      summary: 'Get a list of question for specific search request, empty list if none'
      parameters:
        - in: query
          name: q # searchString
          description: The string to search for
          required: true
          schema: 
            type: string
        - in: query
          name: sortBy
          required: false
          description: Sort the answer by given criteria
          schema: 
            type: string
            enum: [ldr, likes, dislikes, timestamp]
            default: ldr
        - in: query
          name: sortDirection
          required: false
          description: The direction of order, either ASC or DESC
          schema: 
            type: string
            enum: [asc, desc]
            default: desc
        - in: query
          name: offset
          required: false
          description: Ignore x amount of answers
          schema: 
            type: integer
            default: 0
        - in: query
          name: limit
          required: false
          description: Limit the amount of answers
          schema: 
            type: integer
            default: 10
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: 'Successful; **TODO: maybe skip content in this view to lower response payload**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /question/{questionId}:
    get: 
      tags:
        - questions
      summary: Get a details to a single question
      parameters:
        - in: path
          name: questionId
          required: true
          description: UUID of a question
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched a single question
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Question'
        '404':
          description: Not found

  /question/{questionId}/title:
    get: 
      tags:
        - questions
      summary: Get a title for one question
      parameters:
        - in: path
          name: questionId
          required: true
          description: UUID of a question
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched a single title
          content:
            application/json: 
              schema: 
                object:
                  properties:
                    title:
                      type: string
        '404':
          description: Not found
        
          
  /question/{questionId}/answers:
    get: 
      tags:
        - questions
      summary: Get a answers to a single question
      parameters:
        - in: path
          name: questionId
          required: true
          description: UUID of a question
          schema:
            type: string
        - in: query
          name: sortBy
          required: false
          description: Sort the answer by given criteria
          schema: 
            type: string
            enum: [ldr, likes, dislikes, timestamp]
            default: ldr
        - in: query
          name: sortDirection
          required: false
          description: The direction of order, either ASC or DESC
          schema: 
            type: string
            enum: [asc, desc]
            default: desc
        - in: query
          name: offset
          required: false
          description: Ignore x amount of answers
          schema: 
            type: integer
            default: 0
        - in: query
          name: limit
          required: false
          description: Limit the amount of answers
          schema: 
            type: integer
            default: 10
            minimum: 0
            maximum: 50
        - in: query
          name: enableAI
          required: false
          description: Should the AI answer be returned
          schema: 
            type: boolean
            default: true
      responses:
        '200':
          description: Successfully fetched a single question
          content:
            application/json: 
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
        '404':
          description: Not found      
  /question/create:
    post: 
      tags: 
       - questions
      summary: Create a new question
      requestBody:
        description: the data that needs to be send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestion'
      responses:
        '200': 
          description: 'Question successfully created'
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    userId:
                      type: string
        '422':
          description: 'Unprocessable Entity: Payload is not sufficient'

  /question/{questionId}/answer:
    post:
      tags:
       - questions
      summary: Create a answer for a question
      parameters:
        - in: path
          name: questionId
          required: true
          description: UUID of a question
          schema:
            type: string
      requestBody:
        description: the data that needs to be send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnswer'
      responses:
        '200':
          description: 'Answer successfully created'
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Answer'
        '422':
          description: 'Unprocessable Entity: Payload is not sufficient'
        '404':
          description: 'Not Found'
        '403':
          description: 'Forbidden, user needs to be registered'
        '406':
          description: 'Not Acceptable, used forbidden words in request'


  /tags/find:
    get: 
      tags:
        - tag
      summary: Find possible results for a given tag
      parameters:
        - in: query
          name: tag
          schema:
            type: string
            default: ""
            description: The tag to search for
      responses:
        '200': 
          description: Returns an array of possible same tags or nothing
          content:
            application/json:
              schema:
                type: array
                description: 'The array of tags, __if tag is not valid result is empty__'
                items: 
                  type: string
  
  /profile/{userId}:
    get:
      tags:
        - user
      summary: 'basic information of users, can be used for overviews, can be seen by everybody'
      parameters: 
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileShort'
        '404':
          description: 'User does not exist'
  /profile/{userId}/profile:
    get:
      tags:
        - user
      summary: 'detailed information for one user, can be used for profiles, can be seen by everybody'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: 'User does not exist'
  
  /profile/update:
    put: 
      tags:
        - user
      summary: 'update profile information for this user'
      parameters: []
      requestBody:
        description: the data that needs to be send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200': 
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '422':
          description: 'Unprocessable Entity: Payload is not sufficient'
        '401':
          description: 'Unauthorized'
  /favourites:
    get: 
      tags:
        - favourites
      summary: "get all your favourite questions"
      description: "Result is empty if user has no question"
      responses:
        '200': 
          description: "Ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '401':
          description: 'Unauthorized'
  /favourites/{questionId}: 
    post: 
      tags:
        - favourites
      summary: Add a question to your favourites
      parameters:
        - in: path
          name: questionId
          required: true
          description: 'ID for _question_ which should be manipulated in favourite'
          schema:
            type: string
      responses:
        '200': 
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden: The user has reached its maximum amount of favourites. Link to upgrade to premium page'
        '404':
          description: 'Not Found: This QuestionID does not exist.'
    delete:
      tags:
        - favourites
      summary: Remove a question to your favourites
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: 'Success'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Not Found: This QuestionID does not exist or does not exist in your favourites'
        
  /quests:
    get: 
      tags:
        - quests
      summary: 'Returns the quests of the week of a user'
      responses:
        '200': 
          description: Returns all the quests of a user
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Quest'
        '401':  
          description: 'Unauthorized'

  /login/attemps: 
    get: 
      tags:
        - login
      summary: 'Returns the log of login attempts for the user'
      responses:
        '200': 
          description: Returns the log of login attempts
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/LoginAttempt'
        '401':  
          description: 'Unauthorized'


  /cookie:
    get:
      tags:
      - development
      summary: 'Returns the cookie if it exists, otherwise redirects to Ory.'
      parameters: []
      responses:
        '200': 
          description: 'OK'
  /upgrade:
    get:
      tags:
      - development
      summary: 'upgrade this user to premium'
      responses:
        '200':
          description: 'OK'
        '403':
          description: 'Forbidden, you are currently premium'
        '401':
          description: 'Unauthorized'
        '500':
          description: 'Server Error'

  /whatWasMyPassword/{userId}:
    get:
      tags:
      - special
      summary: Allows users to retrieve a forgotten password."
      parameters:
        - in: path
          name: userId
          required: true
          description: 'userId is ignored'
          schema:
            type: string
      responses:
        '418':
          description: 'Never gonna give you up'
          
          



