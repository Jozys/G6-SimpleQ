// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID             String         @id @default(uuid())
  username           String         @unique @db.VarChar(40)
  isPro              Boolean        @default(false)
  isAdmin            Boolean        @default(false)
  timeOfRegistration DateTime       @default(now())
  activityPoints     Int            @default(0)
  email              String?
  createdContents    UserContent[]
  votes              Vote[]
  favorites          Favorite[]
  experts            Expert[]
  userTimeouts       UserTimeout[]
  moderations        Moderation[]
  loginAttempts      LoginAttempt[]
  userQuests         UserQuest[]
}

model UserContent {
  userContentID  String          @id @default(uuid())
  owner          User?           @relation(fields: [ownerID], references: [userID])
  ownerID        String?
  groupID        String          @default(uuid())
  content        String?         @db.LongText
  timeOfCreation DateTime        @default(now())
  type           UserContentType
  question       Question?
  answer         Answer?
  discussion     Discussion?
  votes          Vote[]
  favorites      Favorite[]
  tags           Tag[]

  @@fulltext([content])
}

model Question {
  userContent   UserContent @relation(fields: [userContentID], references: [userContentID])
  userContentID String      @id
  title         String      @db.VarChar(50)

  @@fulltext([title])
}

model Answer {
  userContent   UserContent @relation(fields: [userContentID], references: [userContentID])
  userContentID String      @id
  typeOfAI      TypeOfAI
}

enum TypeOfAI {
  GPT
  WolframAlpha
  None
}

model Discussion {
  userContent   UserContent   @relation(fields: [userContentID], references: [userContentID])
  userContentID String        @id
  title         String        @db.VarChar(50)
  isPrivate     Boolean       @default(false)
  userTimeouts  UserTimeout[]
  moderations   Moderation[]

  @@fulltext([title])
}

enum UserContentType {
  Question
  Answer
  Discussion
}

model UserTimeout {
  timeoutedUser   User       @relation(fields: [timeoutedUserID], references: [userID])
  timeoutedUserID String
  moderation      Moderation @relation(fields: [moderationID], references: [moderationID])
  moderationID    String
  content         Discussion @relation(fields: [contentID], references: [userContentID])
  contentID       String
  timeout         DateTime

  @@id([timeoutedUserID, contentID])
}

model Moderation {
  moderationID String        @id @default(uuid())
  moderator    User          @relation(fields: [moderatorID], references: [userID])
  moderatorID  String
  discussion   Discussion    @relation(fields: [discussionID], references: [userContentID])
  discussionID String
  userTimeouts UserTimeout[]
}

model Vote {
  content      UserContent @relation(fields: [contentID], references: [userContentID])
  contentID    String
  votingUser   User        @relation(fields: [votingUserID], references: [userID])
  votingUserID String
  isPositive   Boolean     @default(true)

  @@id([contentID, votingUserID])
}

model Favorite {
  content        UserContent @relation(fields: [contentID], references: [userContentID])
  contentID      String
  favoriteUser   User        @relation(fields: [favoriteUserID], references: [userID])
  favoriteUserID String

  @@id([contentID, favoriteUserID])
}

model Tag {
  tagname  String        @id @unique @db.VarChar(12)
  experts  Expert[]
  contents UserContent[]
}

model Expert {
  expertUser   User   @relation(fields: [expertUserID], references: [userID])
  expertUserID String
  tag          Tag    @relation(fields: [tagname], references: [tagname])
  tagname      String
  expertPoints Int    @default(0)

  @@id([expertUserID, tagname])
}

model LoginAttempt {
  loginUser     User     @relation(fields: [loginUserID], references: [userID])
  loginUserID   String
  timeOfLogin   DateTime @default(now())
  wasSuccessful Boolean

  @@id([loginUserID, timeOfLogin])
}

model Quest {
  questID     String      @id @default(uuid())
  name        String
  description String?     @db.Text
  type        QuestType
  points      Int
  isSelected  Boolean
  userQuests  UserQuest[]
}

enum QuestType {
  QuestionQuest
  AnswerQuest
  DiscussionQuest
  AcivityQuest
}

model UserQuest {
  quest       Quest   @relation(fields: [questID], references: [questID])
  questID     String
  questUser   User    @relation(fields: [questUserID], references: [userID])
  questUserID String
  done        Boolean

  @@id([questID, questUserID])
}

model Blacklist {
  name String @id @unique
}
